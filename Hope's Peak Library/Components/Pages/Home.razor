@rendermode InteractiveServer
@using Logto.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

@page "/"

<PageTitle>Hope's Peak Library</PageTitle>
<div class="bg-white mt-8 w-screen hadow-indigo-500/50 shadow-2xl inset-shadow-sm  " style=" overflow: hidden;">
    <img class=" m-auto " src="Media/HPLIBRARY.png" />
    <div class="flex place-content-center m-auto text-center gap-2">
        @if (User.Identity?.IsAuthenticated == false)
        {
            <button @onclick="SignIn" class=" hover:scale-125 duration-150 ease-in-out transition-all border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-xl text-sm focus:border-black focus:outline-none">Sign in</button>
        }
        else
        {
            <button @onclick="SignOut" class=" hover:scale-125 duration-150 ease-in-out transition-all border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-xl text-sm focus:border-black focus:outline-none">Sign out</button>
        }


    </div>
</div>

<div style="height: 150px;">

</div>
<div class="m-auto text-center gap-2 ">
    <input type="text" @bind="Search" style="@Op1" class=" hover:scale-125 focus:scale-125 duration-150 ease-in-out transition-all m-auto  border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-xl text-sm focus:border-black focus:outline-none"
    placeholder="Search..." />
    <div class="flex place-content-center">
        <button @onclick="SearchArticle" class=" hover:scale-125 duration-150 ease-in-out transition-all border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-xl text-sm focus:border-black focus:outline-none">Search</button>
        <button @onclick="() => {NavigateTo(Articles);}" class=" hover:scale-125 duration-150 ease-in-out transition-all  border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-xl text-sm focus:border-black focus:outline-none">Articles</button>
    </div>
</div>
@if (Searching == true) {
    @if (IsArticle == false)
    {
        try
        {
            var filteredArticles = Articless.Where(article => article.Contains(Search));
            @foreach (var articlee in filteredArticles)
            {
                var articleName = Path.GetFileNameWithoutExtension(articlee);
                string articlname = articleName.Substring(14, articleName.Length - 14);
                <div @onclick="() => {ChooseArticle(articlee);}" class="  hover:cursor-pointer bg-white rounded-xl m-8 shadow-indigo-500/50 shadow-2xl inset-shadow-sm h-full hover:scale-105 duration-150 ease-in-out transition-all " style=" overflow: hidden;">
                    <h1 class="m-8 text-4xl">@articlname</h1>
                </div>
            }
        }
        catch (Exception)
        {
            <h1 class="m-auto scale-200">No articles found!</h1>
        }
    }
    else
    {
        try
        {
            var articleName = Path.GetFileNameWithoutExtension(ChosenArticle);
            var FN = ChosenArticle;
            string FNN = ChosenArticle.ToString();
            string FileName = FNN.Substring(8, FNN.Length - 8);
            var content = File.ReadAllText(ChosenArticle);
            string articlname = articleName.Substring(14, articleName.Length - 14);
            <div class="bg-white rounded-xl m-8 shadow-indigo-500/50 shadow-2xl inset-shadow-sm h-full  duration-150 ease-in-out transition-all " style=" overflow: hidden;">
                <h1 class="ml-8 mt-2 text-2xl text-blue-500 hover:text-3xl hover:text-blue-600 hover:cursor-pointer duration-150 ease-in-out transition-all" @onclick="UnChooseArticle">Return</h1>
                <h1 class="m-8 text-4xl"> @articlname </h1>
                @if (User.Claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Subject)?.Value == "YOUR OWNER ACCOUNT HERE") // Replace YOUR OWNER ACCOUNT HERE with your owner account ID
                {
                    <h1 @onclick="DeleteArticle" class="text-red-500 text-2xl hover:text-3xl hover:text-red-600 hover:cursor-pointer duration-150 ease-in-out transition-all">Delete Article (Admin account only)</h1>
                }

                <zero-md class="m-2" src="@FileName"></zero-md>


            </div>
        }
        catch (Exception e)
        {
            <h1 class="m-auto scale-200">Article not found!</h1>
        }
    }
}



@code {
    public string[] Articless { get; set; } = Directory.GetFiles("wwwroot/Articles");
    public string Search { get; set; }
   
    public string Op1 { get; set; } = "opacity: 1;";
    public string Op05 { get; set; } = "opacity: 0.5;";
    public string Articles { get; set; } = "/Articles";
    public bool IsArticle { get; set; } = false;
    public string ChosenArticle { get; set; }
    public bool Searching { get; set; } = false;
    private ClaimsPrincipal? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
    }

    public void SearchArticle()
    {
        if (Search != null)
        {
            Searching = true;
        }
    }

    private void SignIn()
    {
        NavigationManager.NavigateTo("/SignIn", forceLoad: true);
    }

    private void SignOut()
    {
        NavigationManager.NavigateTo("/SignOut", forceLoad: true);
    }
    public async Task Reload()
    {
        string url = "/";
        await jsRuntime.InvokeAsync<object>("open", url, "_self");
    }
    public async Task NavigateTo(string url)
    {
        
        await jsRuntime.InvokeAsync<object>("open", url, "_self");
    }
    public async Task NavigateToNT(string url)
    {

        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }
    public void ChooseArticle(string article)
    {
        ChosenArticle = article;
        IsArticle = true;
    }
    public void UnChooseArticle()
    {
        IsArticle = false;
    }
    public void DeleteArticle()
    {
        if (User.Claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Subject)?.Value == "YOUR OWNER ACCOUNT HERE") // Replace YOUR OWNER ACCOUNT HERE with your owner account ID
        {
            File.Delete(ChosenArticle);
            Reload();
        }
    }
}