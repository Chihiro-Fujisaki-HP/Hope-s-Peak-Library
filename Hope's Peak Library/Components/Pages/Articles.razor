@rendermode InteractiveServer
@using Logto.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

@page "/Articles"
<script type="module" src="https://cdn.jsdelivr.net/npm/zero-md@3?register"></script>
<PageTitle>Hope's Peak Library</PageTitle>

<div class="w-full h-32 bg-violet-600 shadow-indigo-500/50 shadow-2xl inset-shadow-sm ">

    <div class="grid grid-cols-12 gap-8 ">

        <img @onclick="() => {NavigateTo(Home);}" class=" ml-8 m-auto scale-125 mt-8 hover:scale-150 hover:cursor-pointer duration-150 ease-in-out transition-all" src="Media/HPLIBRARY.png" />
        @if (User.Identity?.IsAuthenticated == false)
        {
            <button @onclick="SignIn" class=" ml-4 mt-8 hover:scale-125 duration-150 ease-in-out transition-all border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-xl text-sm focus:border-black focus:outline-none">Sign in</button>
        }
        else
        {
            <button @onclick="() => {NavigateTo(CA);}" class=" ml-4 mt-8 hover:scale-125 duration-150 ease-in-out transition-all border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-xl text-sm focus:border-black focus:outline-none">Create Article</button>
            <button @onclick="SignOut" class=" ml-4 mt-8 hover:scale-125 duration-150 ease-in-out transition-all border-2 border-gray-300 bg-white h-10 px-5 pr-16 rounded-xl text-sm focus:border-black focus:outline-none">Sign out</button>

        }

    </div>

</div>

@if (IsArticle == false){
    try {
    @foreach (var articlee in Articless)
    {
        var articleName = Path.GetFileNameWithoutExtension(articlee);
        string articlname = articleName.Substring(14, articleName.Length - 14);
        <div @onclick="() => {ChooseArticle(articlee);}" class="  hover:cursor-pointer bg-white rounded-xl m-8 shadow-indigo-500/50 shadow-2xl inset-shadow-sm h-full hover:scale-105 duration-150 ease-in-out transition-all " style=" overflow: hidden;">
            <h1 class="m-8 text-4xl">@articlname</h1>
        </div>

    }
    }
    catch (Exception e)
    {
        <h1 class="m-auto scale-200">No articles found!</h1>
    }
}
else {
    try {
    var articleName = Path.GetFileNameWithoutExtension(ChosenArticle);
    var FN = ChosenArticle;
    string FNN = ChosenArticle.ToString();
    string FileName = FNN.Substring(8, FNN.Length - 8);
    var content = File.ReadAllText(ChosenArticle);
    string articlname = articleName.Substring(14, articleName.Length - 14);
    <div class="bg-white rounded-xl m-8 shadow-indigo-500/50 shadow-2xl inset-shadow-sm h-full  duration-150 ease-in-out transition-all " style=" overflow: hidden;">
        <h1 class="ml-8 mt-2 text-2xl text-blue-500 hover:text-3xl hover:text-blue-600 hover:cursor-pointer duration-150 ease-in-out transition-all" @onclick="UnChooseArticle">Return</h1>
        <h1 class="m-8 text-4xl"> @articlname </h1>
            @if (User.Claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Subject)?.Value == "YOUR OWNER ACCOUNT HERE") // Replace YOUR OWNER ACCOUNT HERE with your owner account ID
        {
            <h1 @onclick="DeleteArticle" class="text-red-500 text-2xl hover:text-3xl hover:text-red-600 hover:cursor-pointer duration-150 ease-in-out transition-all">Delete Article (Admin account only)</h1>
        }

        <zero-md class="m-2" src="@FileName"></zero-md>


    </div>
    }
    catch (Exception e)
    {
        <h1 class="m-auto scale-200">Article not found!</h1>
    }
}





@code {
    public string[] Articless { get; set; } = Directory.GetFiles("wwwroot/Articles");
    public string Home { get; set; } = "/";
    public string CA { get; set; } = "/CreateArticle";
    public bool IsArticle { get; set; } = false;
    public string ChosenArticle { get; set; }
    private ClaimsPrincipal? User { get; set; }

    public void inpte()
    {

        var claims = User.Claims;

        // Get the user ID
        var userId = claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Subject)?.Value;

    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
    }

    private void SignIn()
    {
        NavigationManager.NavigateTo("/SignIn", forceLoad: true);
    }

    private void SignOut()
    {
        NavigationManager.NavigateTo("/SignOut", forceLoad: true);
    }
    public async Task Reload()
    {
        string url = "/Articles";
        await jsRuntime.InvokeAsync<object>("open", url, "_self");
    }
    public async Task NavigateTo(string url)
    {

        await jsRuntime.InvokeAsync<object>("open", url, "_self");
    }
    public async Task NavigateToNT(string url)
    {

        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    public void ChooseArticle(string article)
    {
        ChosenArticle = article;
        IsArticle = true;
    }
    public void UnChooseArticle()
    {
        IsArticle = false;
    }
    public void DeleteArticle()
    {
        if (User.Claims.FirstOrDefault(c => c.Type == LogtoParameters.Claims.Subject)?.Value == "YOUR OWNER ACCOUNT HERE") // Replace YOUR OWNER ACCOUNT HERE with your owner account ID
        {
            File.Delete(ChosenArticle);
            Reload();
        }
    }
}
